>>> __init__.py

<<< __init__.py|

>>> app.py
from fastapi import FastAPI
from fastapi.responses import FileResponse
from fastapi.staticfiles import StaticFiles

from .db import Base, engine
from .users.router import router as users_router
from .groups.router import router as groups_router
from .tasks.router import router as tasks_router

Base.metadata.create_all(bind=engine)


app = FastAPI()


app.mount("/assets", StaticFiles(directory="dist/assets"), name="assets")
app.mount("/css", StaticFiles(directory="dist/css"), name="css")


@app.get("/")
def serve_index():
    return FileResponse("dist/index.html")


app.include_router(users_router, prefix="/api")
app.include_router(groups_router, prefix="/api/groups")
app.include_router(tasks_router, prefix="/api/tasks")
<<< app.py|

>>> crud.py
# app/crud.py
from typing import List, Optional
from fastapi import HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import or_

from .models import User, Task, Group, GroupMember, GroupAdmin
from .schemas import UserCreate, TaskCreate


def create_or_update_user(db: Session, user_data: UserCreate) -> User:
    user = db.query(User).filter(User.telegram_id ==
                                 user_data.telegram_id).first()
    if user:
        user.fio = user_data.fio
    else:
        user = User(
            telegram_id=user_data.telegram_id,
            fio=user_data.fio,
        )
        db.add(user)
    db.commit()
    db.refresh(user)
    return user


def get_all_users(db: Session) -> List[User]:
    return db.query(User).all()


def create_group(db: Session, name: str) -> Group:
    existing_group = db.query(Group).filter(Group.name == name).first()
    if existing_group:
        raise HTTPException(status_code=400)
    group = Group(name=name)
    db.add(group)
    db.commit()
    db.refresh(group)
    return group


def add_user_to_group(db: Session, group_name: str, telegram_id: str) -> str:
    group = db.query(Group).filter(Group.name == group_name).first()
    if not group:
        raise HTTPException(status_code=404)
    user_to_add = db.query(User).filter(
        User.telegram_id == telegram_id).first()
    if not user_to_add:
        raise HTTPException(status_code=404)
    existing_member = db.query(GroupMember).filter(
        GroupMember.group_id == group.id,
        GroupMember.user_id == user_to_add.id
    ).first()
    if existing_member:
        raise HTTPException(status_code=400)
    new_member = GroupMember(group_id=group.id, user_id=user_to_add.id)
    db.add(new_member)
    db.commit()
    return f"User {telegram_id} added to group {group.name}"


def add_admin_to_group(db: Session, group_name: str, telegram_id: str) -> str:
    group = db.query(Group).filter(Group.name == group_name).first()
    if not group:
        raise HTTPException(status_code=404)
    user_to_add = db.query(User).filter(
        User.telegram_id == telegram_id).first()
    if not user_to_add:
        raise HTTPException(status_code=404)
    existing_admin = db.query(GroupAdmin).filter(
        GroupAdmin.group_id == group.id,
        GroupAdmin.user_id == user_to_add.id
    ).first()
    if existing_admin:
        raise HTTPException(
            status_code=400)
    new_admin = GroupAdmin(group_id=group.id, user_id=user_to_add.id)
    db.add(new_admin)
    db.commit()
    return f"Юзер {telegram_id} теперь админ в {group.name}"



def get_my_groups(db: Session, user_id: str, role: str) -> List[Group]:
    if role == "member":
        groups = (
            db.query(Group)
            .join(GroupMember, Group.id == GroupMember.group_id)
            .join(User, User.id == GroupMember.user_id)
            .filter(User.telegram_id == user_id)
            .all()
        )
    else:
        groups = (
            db.query(Group)
            .join(GroupAdmin, Group.id == GroupAdmin.group_id)
            .join(User, User.id == GroupAdmin.user_id)
            .filter(User.telegram_id == user_id)
            .all()
        )
    return groups


def get_all_groups(db: Session) -> List[Group]:
    return db.query(Group).all()


def create_task(db: Session, task_data: TaskCreate, creator_id: str) -> Task:
    if task_data.group_id is not None:
        group = db.query(Group).filter(Group.id == task_data.group_id).first()
        if not group:
            raise HTTPException(status_code=404)
        is_member = (
            db.query(GroupMember)
            .join(User, User.id == GroupMember.user_id)
            .filter(GroupMember.group_id == group.id, User.telegram_id == creator_id)
            .first()
        )
        is_admin = (
            db.query(GroupAdmin)
            .join(User, User.id == GroupAdmin.user_id)
            .filter(GroupAdmin.group_id == group.id, User.telegram_id == creator_id)
            .first()
        )
        if not is_member and not is_admin:
            raise HTTPException(
                status_code=403,
            )
    new_task = Task(
        title=task_data.title,
        description=task_data.description,
        time_spent=task_data.time_spent,
        task_date=task_data.task_date,
        creator_id=creator_id,
        group_id=task_data.group_id,
    )
    db.add(new_task)
    db.commit()
    db.refresh(new_task)
    return new_task


def get_all_tasks(db: Session):
    rows = (
        db.query(Task, User)
        .outerjoin(User, Task.creator_id == User.telegram_id)
        .all()
    )
    result = []
    for task, user in rows:
        result.append({
            "id": task.id,
            "title": task.title,
            "description": task.description or "",
            "time_spent": task.time_spent or 0,
            "task_date": task.task_date.isoformat() if task.task_date else "",
            "creator_name": user.fio if user else "",
            "group_id": task.group_id,
            "created_at": task.created_at.isoformat() if task.created_at else "",
        })
    return result


def get_tasks_for_report_filtered(
    db: Session,
    user_id: str,
    filter_mode: str,
    group_id: Optional[int]
):
    admin_group_ids = [
        gid for (gid,) in db.query(GroupAdmin.group_id)
                            .join(User, User.id == GroupAdmin.user_id)
                            .filter(User.telegram_id == user_id)
                            .all()
    ]
    if filter_mode == "my":
        condition = (Task.creator_id == user_id)
    elif filter_mode == "admin_all":
        if admin_group_ids:
            condition = or_(
                Task.creator_id == user_id,
                Task.group_id.in_(admin_group_ids)
            )
        else:
            condition = (Task.creator_id == user_id)
    elif filter_mode == "group":
        if not group_id:
            raise HTTPException(
                status_code=400)
        if group_id not in admin_group_ids:
            raise HTTPException(
                status_code=403,
            )
        condition = (Task.group_id == group_id)
    else:
        raise HTTPException(status_code=400)
    rows = (
        db.query(Task, User)
        .outerjoin(User, Task.creator_id == User.telegram_id)
        .filter(condition)
        .all()
    )
    result = []
    for task, user in rows:
        result.append({
            "id": task.id,
            "title": task.title,
            "description": task.description or "",
            "time_spent": task.time_spent or 0,
            "task_date": task.task_date.isoformat() if task.task_date else "",
            "creator_name": user.fio if user else "",
            "group_id": task.group_id,
            "created_at": task.created_at.isoformat() if task.created_at else "",
        })
    return result
<<< crud.py|

>>> db.py
from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base, sessionmaker

SQLITE_URL = "sqlite:///./db.sqlite"

engine = create_engine(SQLITE_URL, connect_args={"check_same_thread": False})

SessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)
Base = declarative_base()
<<< db.py|

>>> dependencies.py
import json
from urllib.parse import parse_qs

from fastapi import HTTPException
from .db import SessionLocal


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def get_user_id_from_init_data(init_data: str) -> str:
    parsed = parse_qs(init_data)
    user_id = None
    if "user" in parsed:
        try:
            user_obj = json.loads(parsed["user"][0])
            user_id = str(user_obj.get("id"))
        except Exception as ex:
            print("Error parsing initData:", ex)
    if not user_id:
        raise HTTPException(status_code=400, detail="Invalid init data")
    return user_id
<<< dependencies.py|

>>> models.py
from datetime import datetime
from sqlalchemy import Column, Integer, String, Table, Text, Float, Date, DateTime, ForeignKey
from .db import Base


class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True, autoincrement=False)
    fio = Column(String(200), nullable=True)
    telegram_id = Column(String(50), unique=True, nullable=False)


class Task(Base):
    __tablename__ = "tasks"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String(200), nullable=False)
    description = Column(Text, nullable=True)
    time_spent = Column(Float, nullable=True)
    task_date = Column(Date, nullable=True)
    creator_id = Column(String(50), nullable=True) 
    group_id = Column(Integer, ForeignKey("groups.id"), nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)


class Group(Base):
    __tablename__ = "groups"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), unique=True, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)


class GroupMember(Base):
    __tablename__ = "group_members"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    group_id = Column(Integer, ForeignKey("groups.id"), nullable=False)


class GroupAdmin(Base):
    __tablename__ = "group_admins"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    group_id = Column(Integer, ForeignKey("groups.id"), nullable=False)

<<< models.py|

>>> schemas.py
from pydantic import BaseModel, Field
from typing import Optional
from datetime import date, datetime

class UserCreate(BaseModel):
    telegram_id: str = Field(..., min_length=1)
    fio: str = Field(..., min_length=1)


class TaskCreate(BaseModel):
    title: str
    description: Optional[str] = None
    time_spent: Optional[float] = Field(None, ge=0)
    task_date: Optional[date] = None
    init_data: str
    group_id: Optional[int] = None


class GroupCreate(BaseModel):
    name: str = Field(..., min_length=1, max_length=100)
    init_data: str


class GroupAddMember(BaseModel):
    group_name: str
    telegram_id: str


class GroupAddAdmin(BaseModel):
    group_name: str
    telegram_id: str


class InitData(BaseModel):
    init_data: str


# Фильтр для отчётов:
class TaskReportFilter(BaseModel):
    init_data: str
    filter_mode: str  # "my" | "admin_all" | "group"
    group_id: Optional[int] = None


class TaskResponse(BaseModel):
    id: int
    title: str
    description: str
    time_spent: float
    task_date: Optional[date]
    creator_name: Optional[str]
    group_id: Optional[int]
    created_at: datetime

<<< schemas.py|

>>> groups\__init__.py

<<< groups\__init__.py|

>>> groups\router.py
from fastapi import APIRouter, Depends, Query
from sqlalchemy.orm import Session

from ..dependencies import get_db, get_user_id_from_init_data
from .. import crud
from ..schemas import (
    UserCreate,
    GroupAddMember,
    GroupAddAdmin,
    GroupCreate,
    TaskCreate,
    InitData,
    TaskReportFilter
)

router = APIRouter()


@router.get("/")
def get_all_groups_route(db: Session = Depends(get_db)):
    return crud.get_all_groups(db)


@router.post("/")
def create_group_route(group_data: GroupCreate, db: Session = Depends(get_db)):
    group = crud.create_group(db, group_data.name)
    return {"status": "ok", "group_id": group.id}


@router.put("/members")
def put_user_to_group_route(member_data: GroupAddMember, db: Session = Depends(get_db)):
    status_msg = crud.add_user_to_group(
        db, member_data.group_name, member_data.telegram_id)
    return {"status": status_msg}


@router.put("/admins")
def put_admin_to_group_route(member_data: GroupAddAdmin, db: Session = Depends(get_db)):
    status_msg = crud.add_admin_to_group(
        db, member_data.group_name, member_data.telegram_id)
    return {"status": status_msg}


@router.post("/my")
def get_my_groups_route(init_data: InitData, role: str = Query("member", pattern="^(member|admin)$"), db: Session = Depends(get_db)):
    user_id = get_user_id_from_init_data(init_data.init_data)
    groups = crud.get_my_groups(db, user_id, role)
    return [{"id": g.id, "name": g.name} for g in groups]


<<< groups\router.py|

>>> tasks\__init__.py

<<< tasks\__init__.py|

>>> tasks\router.py
from fastapi import APIRouter, Depends, Query
from sqlalchemy.orm import Session

from ..dependencies import get_db, get_user_id_from_init_data
from .. import crud
from ..schemas import (
    UserCreate,
    GroupAddMember,
    GroupAddAdmin,
    GroupCreate,
    TaskCreate,
    InitData,
    TaskReportFilter
)

router = APIRouter()

@router.post("/")
def create_task_route(task_data: TaskCreate, db: Session = Depends(get_db)):
    creator_id = get_user_id_from_init_data(task_data.init_data)
    new_task = crud.create_task(db, task_data, creator_id)
    return {"task_id": new_task.id}


@router.post("/report/filter")
def get_tasks_report_filter_route(req: TaskReportFilter, db: Session = Depends(get_db)):
    user_id = get_user_id_from_init_data(req.init_data)
    return crud.get_tasks_for_report_filtered(db, user_id, req.filter_mode, req.group_id)



@router.get("/")
def get_all_tasks_route(db: Session = Depends(get_db)):
    return crud.get_all_tasks(db)
<<< tasks\router.py|

>>> users\__init__.py

<<< users\__init__.py|

>>> users\router.py
# app/api.py
from fastapi import APIRouter, Depends, Query
from sqlalchemy.orm import Session

from ..dependencies import get_db, get_user_id_from_init_data
from .. import crud
from ..schemas import (
    UserCreate,
    GroupAddMember,
    GroupAddAdmin,
    GroupCreate,
    TaskCreate,
    InitData,
    TaskReportFilter
)

router = APIRouter()


@router.post("/user")
def create_user_route(user_data: UserCreate, db: Session = Depends(get_db)):
    user = crud.create_or_update_user(db, user_data)
    return {"status": "ok", "message": f"User {user.telegram_id} saved/updated"}


@router.get("/users")
def get_all_users_route(db: Session = Depends(get_db)):
    users = crud.get_all_users(db)
    return [{"id": user.telegram_id, "fio": user.fio} for user in users]


<<< users\router.py|

